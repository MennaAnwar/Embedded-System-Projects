
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000025bc  00002650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  00002658  2**0
                  ALLOC
  3 .stab         0000198c  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a70  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000694d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000085e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000089d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000091a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec eb       	ldi	r30, 0xBC	; 188
      78:	f5 e2       	ldi	r31, 0x25	; 37
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 dc 12 	jmp	0x25b8	; 0x25b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 80 12 	jmp	0x2500	; 0x2500 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "keypad.h"

int result , sign , num1=0 , num2=0 , a =0 , b=0 , check1=0 , check2=0;

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ad 97       	sbiw	r28, 0x2d	; 45
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;
	LCD_init();
     b5a:	0e 94 4d 09 	call	0x129a	; 0x129a <LCD_init>
     b5e:	ba c0       	rjmp	.+372    	; 0xcd4 <main+0x18e>

    while(1)
    {
		/* if any switch pressed for more than 500 ms it counts more than one press */
    	while(check1 == 0){
		num1 = KeyPad_getPressedKey(); /* get the pressed key number */
     b60:	0e 94 4f 08 	call	0x109e	; 0x109e <KeyPad_getPressedKey>
     b64:	88 2f       	mov	r24, r24
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	90 93 69 00 	sts	0x0069, r25
     b6c:	80 93 68 00 	sts	0x0068, r24
		if((num1 <= 9) && (num1 >= 0))
     b70:	80 91 68 00 	lds	r24, 0x0068
     b74:	90 91 69 00 	lds	r25, 0x0069
     b78:	8a 30       	cpi	r24, 0x0A	; 10
     b7a:	91 05       	cpc	r25, r1
     b7c:	2c f5       	brge	.+74     	; 0xbc8 <main+0x82>
     b7e:	80 91 68 00 	lds	r24, 0x0068
     b82:	90 91 69 00 	lds	r25, 0x0069
     b86:	99 23       	and	r25, r25
     b88:	fc f0       	brlt	.+62     	; 0xbc8 <main+0x82>
		{
			LCD_intgerToString(num1); /* display the pressed keypad switch */
     b8a:	80 91 68 00 	lds	r24, 0x0068
     b8e:	90 91 69 00 	lds	r25, 0x0069
     b92:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_intgerToString>
			a = a*10 + num1;
     b96:	80 91 6c 00 	lds	r24, 0x006C
     b9a:	90 91 6d 00 	lds	r25, 0x006D
     b9e:	9c 01       	movw	r18, r24
     ba0:	22 0f       	add	r18, r18
     ba2:	33 1f       	adc	r19, r19
     ba4:	c9 01       	movw	r24, r18
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	28 0f       	add	r18, r24
     bb0:	39 1f       	adc	r19, r25
     bb2:	80 91 68 00 	lds	r24, 0x0068
     bb6:	90 91 69 00 	lds	r25, 0x0069
     bba:	82 0f       	add	r24, r18
     bbc:	93 1f       	adc	r25, r19
     bbe:	90 93 6d 00 	sts	0x006D, r25
     bc2:	80 93 6c 00 	sts	0x006C, r24
     bc6:	14 c0       	rjmp	.+40     	; 0xbf0 <main+0xaa>
		}
		else{
			check1 =1;
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 71 00 	sts	0x0071, r25
     bd0:	80 93 70 00 	sts	0x0070, r24
			sign = num1;
     bd4:	80 91 68 00 	lds	r24, 0x0068
     bd8:	90 91 69 00 	lds	r25, 0x0069
     bdc:	90 93 75 00 	sts	0x0075, r25
     be0:	80 93 74 00 	sts	0x0074, r24
			LCD_displayCharacter(sign);
     be4:	80 91 74 00 	lds	r24, 0x0074
     be8:	90 91 75 00 	lds	r25, 0x0075
     bec:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_displayCharacter>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	aa ef       	ldi	r26, 0xFA	; 250
     bf6:	b3 e4       	ldi	r27, 0x43	; 67
     bf8:	8f a3       	std	Y+39, r24	; 0x27
     bfa:	98 a7       	std	Y+40, r25	; 0x28
     bfc:	a9 a7       	std	Y+41, r26	; 0x29
     bfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c00:	6f a1       	ldd	r22, Y+39	; 0x27
     c02:	78 a5       	ldd	r23, Y+40	; 0x28
     c04:	89 a5       	ldd	r24, Y+41	; 0x29
     c06:	9a a5       	ldd	r25, Y+42	; 0x2a
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	4a e7       	ldi	r20, 0x7A	; 122
     c0e:	53 e4       	ldi	r21, 0x43	; 67
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	8b a3       	std	Y+35, r24	; 0x23
     c1a:	9c a3       	std	Y+36, r25	; 0x24
     c1c:	ad a3       	std	Y+37, r26	; 0x25
     c1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c20:	6b a1       	ldd	r22, Y+35	; 0x23
     c22:	7c a1       	ldd	r23, Y+36	; 0x24
     c24:	8d a1       	ldd	r24, Y+37	; 0x25
     c26:	9e a1       	ldd	r25, Y+38	; 0x26
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e8       	ldi	r20, 0x80	; 128
     c2e:	5f e3       	ldi	r21, 0x3F	; 63
     c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c34:	88 23       	and	r24, r24
     c36:	2c f4       	brge	.+10     	; 0xc42 <main+0xfc>
		__ticks = 1;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9a a3       	std	Y+34, r25	; 0x22
     c3e:	89 a3       	std	Y+33, r24	; 0x21
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <main+0x17a>
	else if (__tmp > 65535)
     c42:	6b a1       	ldd	r22, Y+35	; 0x23
     c44:	7c a1       	ldd	r23, Y+36	; 0x24
     c46:	8d a1       	ldd	r24, Y+37	; 0x25
     c48:	9e a1       	ldd	r25, Y+38	; 0x26
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	3f ef       	ldi	r19, 0xFF	; 255
     c4e:	4f e7       	ldi	r20, 0x7F	; 127
     c50:	57 e4       	ldi	r21, 0x47	; 71
     c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c56:	18 16       	cp	r1, r24
     c58:	4c f5       	brge	.+82     	; 0xcac <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c5a:	6f a1       	ldd	r22, Y+39	; 0x27
     c5c:	78 a5       	ldd	r23, Y+40	; 0x28
     c5e:	89 a5       	ldd	r24, Y+41	; 0x29
     c60:	9a a5       	ldd	r25, Y+42	; 0x2a
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e2       	ldi	r20, 0x20	; 32
     c68:	51 e4       	ldi	r21, 0x41	; 65
     c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	9a a3       	std	Y+34, r25	; 0x22
     c80:	89 a3       	std	Y+33, r24	; 0x21
     c82:	0f c0       	rjmp	.+30     	; 0xca2 <main+0x15c>
     c84:	89 e1       	ldi	r24, 0x19	; 25
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	98 a3       	std	Y+32, r25	; 0x20
     c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c8e:	98 a1       	ldd	r25, Y+32	; 0x20
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <main+0x14a>
     c94:	98 a3       	std	Y+32, r25	; 0x20
     c96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c98:	89 a1       	ldd	r24, Y+33	; 0x21
     c9a:	9a a1       	ldd	r25, Y+34	; 0x22
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	9a a3       	std	Y+34, r25	; 0x22
     ca0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca2:	89 a1       	ldd	r24, Y+33	; 0x21
     ca4:	9a a1       	ldd	r25, Y+34	; 0x22
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	69 f7       	brne	.-38     	; 0xc84 <main+0x13e>
     caa:	14 c0       	rjmp	.+40     	; 0xcd4 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cac:	6b a1       	ldd	r22, Y+35	; 0x23
     cae:	7c a1       	ldd	r23, Y+36	; 0x24
     cb0:	8d a1       	ldd	r24, Y+37	; 0x25
     cb2:	9e a1       	ldd	r25, Y+38	; 0x26
     cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	9a a3       	std	Y+34, r25	; 0x22
     cbe:	89 a3       	std	Y+33, r24	; 0x21
     cc0:	89 a1       	ldd	r24, Y+33	; 0x21
     cc2:	9a a1       	ldd	r25, Y+34	; 0x22
     cc4:	9e 8f       	std	Y+30, r25	; 0x1e
     cc6:	8d 8f       	std	Y+29, r24	; 0x1d
     cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <main+0x186>
     cd0:	9e 8f       	std	Y+30, r25	; 0x1e
     cd2:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_init();

    while(1)
    {
		/* if any switch pressed for more than 500 ms it counts more than one press */
    	while(check1 == 0){
     cd4:	80 91 70 00 	lds	r24, 0x0070
     cd8:	90 91 71 00 	lds	r25, 0x0071
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	09 f4       	brne	.+2      	; 0xce2 <main+0x19c>
     ce0:	3f cf       	rjmp	.-386    	; 0xb60 <main+0x1a>
     ce2:	af c0       	rjmp	.+350    	; 0xe42 <main+0x2fc>
		_delay_ms(500); /* Press time */

    	}

		while(check2 == 0){
		num2 = KeyPad_getPressedKey(); /* get the pressed key number */
     ce4:	0e 94 4f 08 	call	0x109e	; 0x109e <KeyPad_getPressedKey>
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	90 93 6b 00 	sts	0x006B, r25
     cf0:	80 93 6a 00 	sts	0x006A, r24
		if((num2 <= 9) && (num2 >= 0))
     cf4:	80 91 6a 00 	lds	r24, 0x006A
     cf8:	90 91 6b 00 	lds	r25, 0x006B
     cfc:	8a 30       	cpi	r24, 0x0A	; 10
     cfe:	91 05       	cpc	r25, r1
     d00:	0c f0       	brlt	.+2      	; 0xd04 <main+0x1be>
     d02:	98 c0       	rjmp	.+304    	; 0xe34 <main+0x2ee>
     d04:	80 91 6a 00 	lds	r24, 0x006A
     d08:	90 91 6b 00 	lds	r25, 0x006B
     d0c:	99 23       	and	r25, r25
     d0e:	0c f4       	brge	.+2      	; 0xd12 <main+0x1cc>
     d10:	91 c0       	rjmp	.+290    	; 0xe34 <main+0x2ee>
		{
			LCD_intgerToString(num2); /* display the pressed keypad switch */
     d12:	80 91 6a 00 	lds	r24, 0x006A
     d16:	90 91 6b 00 	lds	r25, 0x006B
     d1a:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_intgerToString>
			b = b*10 + num2;
     d1e:	80 91 6e 00 	lds	r24, 0x006E
     d22:	90 91 6f 00 	lds	r25, 0x006F
     d26:	9c 01       	movw	r18, r24
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	c9 01       	movw	r24, r18
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	28 0f       	add	r18, r24
     d38:	39 1f       	adc	r19, r25
     d3a:	80 91 6a 00 	lds	r24, 0x006A
     d3e:	90 91 6b 00 	lds	r25, 0x006B
     d42:	82 0f       	add	r24, r18
     d44:	93 1f       	adc	r25, r19
     d46:	90 93 6f 00 	sts	0x006F, r25
     d4a:	80 93 6e 00 	sts	0x006E, r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	aa ef       	ldi	r26, 0xFA	; 250
     d54:	b3 e4       	ldi	r27, 0x43	; 67
     d56:	89 8f       	std	Y+25, r24	; 0x19
     d58:	9a 8f       	std	Y+26, r25	; 0x1a
     d5a:	ab 8f       	std	Y+27, r26	; 0x1b
     d5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	69 8d       	ldd	r22, Y+25	; 0x19
     d60:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a e7       	ldi	r20, 0x7A	; 122
     d6c:	53 e4       	ldi	r21, 0x43	; 67
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8d 8b       	std	Y+21, r24	; 0x15
     d78:	9e 8b       	std	Y+22, r25	; 0x16
     d7a:	af 8b       	std	Y+23, r26	; 0x17
     d7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d7e:	6d 89       	ldd	r22, Y+21	; 0x15
     d80:	7e 89       	ldd	r23, Y+22	; 0x16
     d82:	8f 89       	ldd	r24, Y+23	; 0x17
     d84:	98 8d       	ldd	r25, Y+24	; 0x18
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <main+0x25a>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9c 8b       	std	Y+20, r25	; 0x14
     d9c:	8b 8b       	std	Y+19, r24	; 0x13
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <main+0x2d8>
	else if (__tmp > 65535)
     da0:	6d 89       	ldd	r22, Y+21	; 0x15
     da2:	7e 89       	ldd	r23, Y+22	; 0x16
     da4:	8f 89       	ldd	r24, Y+23	; 0x17
     da6:	98 8d       	ldd	r25, Y+24	; 0x18
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	69 8d       	ldd	r22, Y+25	; 0x19
     dba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9c 8b       	std	Y+20, r25	; 0x14
     dde:	8b 8b       	std	Y+19, r24	; 0x13
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <main+0x2ba>
     de2:	89 e1       	ldi	r24, 0x19	; 25
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9a 8b       	std	Y+18, r25	; 0x12
     de8:	89 8b       	std	Y+17, r24	; 0x11
     dea:	89 89       	ldd	r24, Y+17	; 0x11
     dec:	9a 89       	ldd	r25, Y+18	; 0x12
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <main+0x2a8>
     df2:	9a 8b       	std	Y+18, r25	; 0x12
     df4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8b 89       	ldd	r24, Y+19	; 0x13
     df8:	9c 89       	ldd	r25, Y+20	; 0x14
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9c 8b       	std	Y+20, r25	; 0x14
     dfe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8b 89       	ldd	r24, Y+19	; 0x13
     e02:	9c 89       	ldd	r25, Y+20	; 0x14
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <main+0x29c>
     e08:	1c c0       	rjmp	.+56     	; 0xe42 <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	6d 89       	ldd	r22, Y+21	; 0x15
     e0c:	7e 89       	ldd	r23, Y+22	; 0x16
     e0e:	8f 89       	ldd	r24, Y+23	; 0x17
     e10:	98 8d       	ldd	r25, Y+24	; 0x18
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9c 8b       	std	Y+20, r25	; 0x14
     e1c:	8b 8b       	std	Y+19, r24	; 0x13
     e1e:	8b 89       	ldd	r24, Y+19	; 0x13
     e20:	9c 89       	ldd	r25, Y+20	; 0x14
     e22:	98 8b       	std	Y+16, r25	; 0x10
     e24:	8f 87       	std	Y+15, r24	; 0x0f
     e26:	8f 85       	ldd	r24, Y+15	; 0x0f
     e28:	98 89       	ldd	r25, Y+16	; 0x10
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <main+0x2e4>
     e2e:	98 8b       	std	Y+16, r25	; 0x10
     e30:	8f 87       	std	Y+15, r24	; 0x0f
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <main+0x2fc>
		}
		else{
			check2 = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 73 00 	sts	0x0073, r25
     e3c:	80 93 72 00 	sts	0x0072, r24
     e40:	07 c0       	rjmp	.+14     	; 0xe50 <main+0x30a>
		}
		_delay_ms(500); /* Press time */

    	}

		while(check2 == 0){
     e42:	80 91 72 00 	lds	r24, 0x0072
     e46:	90 91 73 00 	lds	r25, 0x0073
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	09 f4       	brne	.+2      	; 0xe50 <main+0x30a>
     e4e:	4a cf       	rjmp	.-364    	; 0xce4 <main+0x19e>
			break;
		}
		_delay_ms(500); /* Press time */
		}

    if(KeyPad_getPressedKey() == '='){
     e50:	0e 94 4f 08 	call	0x109e	; 0x109e <KeyPad_getPressedKey>
     e54:	8d 33       	cpi	r24, 0x3D	; 61
     e56:	09 f0       	breq	.+2      	; 0xe5a <main+0x314>
     e58:	90 c0       	rjmp	.+288    	; 0xf7a <main+0x434>
		switch (sign){
     e5a:	40 91 74 00 	lds	r20, 0x0074
     e5e:	50 91 75 00 	lds	r21, 0x0075
     e62:	5d a7       	std	Y+45, r21	; 0x2d
     e64:	4c a7       	std	Y+44, r20	; 0x2c
     e66:	8c a5       	ldd	r24, Y+44	; 0x2c
     e68:	9d a5       	ldd	r25, Y+45	; 0x2d
     e6a:	8a 32       	cpi	r24, 0x2A	; 42
     e6c:	91 05       	cpc	r25, r1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <main+0x32c>
     e70:	4b c0       	rjmp	.+150    	; 0xf08 <main+0x3c2>
     e72:	4c a5       	ldd	r20, Y+44	; 0x2c
     e74:	5d a5       	ldd	r21, Y+45	; 0x2d
     e76:	4b 32       	cpi	r20, 0x2B	; 43
     e78:	51 05       	cpc	r21, r1
     e7a:	3c f4       	brge	.+14     	; 0xe8a <main+0x344>
     e7c:	8c a5       	ldd	r24, Y+44	; 0x2c
     e7e:	9d a5       	ldd	r25, Y+45	; 0x2d
     e80:	85 32       	cpi	r24, 0x25	; 37
     e82:	91 05       	cpc	r25, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <main+0x342>
     e86:	5f c0       	rjmp	.+190    	; 0xf46 <main+0x400>
     e88:	78 c0       	rjmp	.+240    	; 0xf7a <main+0x434>
     e8a:	4c a5       	ldd	r20, Y+44	; 0x2c
     e8c:	5d a5       	ldd	r21, Y+45	; 0x2d
     e8e:	4b 32       	cpi	r20, 0x2B	; 43
     e90:	51 05       	cpc	r21, r1
     e92:	31 f0       	breq	.+12     	; 0xea0 <main+0x35a>
     e94:	8c a5       	ldd	r24, Y+44	; 0x2c
     e96:	9d a5       	ldd	r25, Y+45	; 0x2d
     e98:	8d 32       	cpi	r24, 0x2D	; 45
     e9a:	91 05       	cpc	r25, r1
     e9c:	d1 f0       	breq	.+52     	; 0xed2 <main+0x38c>
     e9e:	6d c0       	rjmp	.+218    	; 0xf7a <main+0x434>

		case '+':	result = a + b;
     ea0:	20 91 6c 00 	lds	r18, 0x006C
     ea4:	30 91 6d 00 	lds	r19, 0x006D
     ea8:	80 91 6e 00 	lds	r24, 0x006E
     eac:	90 91 6f 00 	lds	r25, 0x006F
     eb0:	82 0f       	add	r24, r18
     eb2:	93 1f       	adc	r25, r19
     eb4:	90 93 77 00 	sts	0x0077, r25
     eb8:	80 93 76 00 	sts	0x0076, r24
					LCD_goToRowColumn(3,0);
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_goToRowColumn>
					LCD_intgerToString(result);
     ec4:	80 91 76 00 	lds	r24, 0x0076
     ec8:	90 91 77 00 	lds	r25, 0x0077
     ecc:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_intgerToString>
     ed0:	54 c0       	rjmp	.+168    	; 0xf7a <main+0x434>
					break;

		case '-':   result = a - b;
     ed2:	20 91 6c 00 	lds	r18, 0x006C
     ed6:	30 91 6d 00 	lds	r19, 0x006D
     eda:	80 91 6e 00 	lds	r24, 0x006E
     ede:	90 91 6f 00 	lds	r25, 0x006F
     ee2:	a9 01       	movw	r20, r18
     ee4:	48 1b       	sub	r20, r24
     ee6:	59 0b       	sbc	r21, r25
     ee8:	ca 01       	movw	r24, r20
     eea:	90 93 77 00 	sts	0x0077, r25
     eee:	80 93 76 00 	sts	0x0076, r24
					LCD_goToRowColumn(3,0);
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_goToRowColumn>
					LCD_intgerToString(result);
     efa:	80 91 76 00 	lds	r24, 0x0076
     efe:	90 91 77 00 	lds	r25, 0x0077
     f02:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_intgerToString>
     f06:	39 c0       	rjmp	.+114    	; 0xf7a <main+0x434>
					break;

		case '*':   result = a * b;
     f08:	20 91 6c 00 	lds	r18, 0x006C
     f0c:	30 91 6d 00 	lds	r19, 0x006D
     f10:	80 91 6e 00 	lds	r24, 0x006E
     f14:	90 91 6f 00 	lds	r25, 0x006F
     f18:	ac 01       	movw	r20, r24
     f1a:	24 9f       	mul	r18, r20
     f1c:	c0 01       	movw	r24, r0
     f1e:	25 9f       	mul	r18, r21
     f20:	90 0d       	add	r25, r0
     f22:	34 9f       	mul	r19, r20
     f24:	90 0d       	add	r25, r0
     f26:	11 24       	eor	r1, r1
     f28:	90 93 77 00 	sts	0x0077, r25
     f2c:	80 93 76 00 	sts	0x0076, r24
					LCD_goToRowColumn(3,0);
     f30:	83 e0       	ldi	r24, 0x03	; 3
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_goToRowColumn>
					LCD_intgerToString(result);
     f38:	80 91 76 00 	lds	r24, 0x0076
     f3c:	90 91 77 00 	lds	r25, 0x0077
     f40:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_intgerToString>
     f44:	1a c0       	rjmp	.+52     	; 0xf7a <main+0x434>
					break;

		case '%':   result = a / b;
     f46:	80 91 6c 00 	lds	r24, 0x006C
     f4a:	90 91 6d 00 	lds	r25, 0x006D
     f4e:	20 91 6e 00 	lds	r18, 0x006E
     f52:	30 91 6f 00 	lds	r19, 0x006F
     f56:	b9 01       	movw	r22, r18
     f58:	0e 94 4d 12 	call	0x249a	; 0x249a <__divmodhi4>
     f5c:	cb 01       	movw	r24, r22
     f5e:	90 93 77 00 	sts	0x0077, r25
     f62:	80 93 76 00 	sts	0x0076, r24
					LCD_goToRowColumn(3,0);
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_goToRowColumn>
					LCD_intgerToString(result);
     f6e:	80 91 76 00 	lds	r24, 0x0076
     f72:	90 91 77 00 	lds	r25, 0x0077
     f76:	0e 94 20 12 	call	0x2440	; 0x2440 <LCD_intgerToString>

		}

		}

    if(KeyPad_getPressedKey() == 'x'){
     f7a:	0e 94 4f 08 	call	0x109e	; 0x109e <KeyPad_getPressedKey>
     f7e:	88 37       	cpi	r24, 0x78	; 120
     f80:	09 f0       	breq	.+2      	; 0xf84 <main+0x43e>
     f82:	a8 ce       	rjmp	.-688    	; 0xcd4 <main+0x18e>
    	num1=0 , num2=0 , a =0 , b=0 , check1=0 , check2=0;
     f84:	10 92 69 00 	sts	0x0069, r1
     f88:	10 92 68 00 	sts	0x0068, r1
     f8c:	10 92 6b 00 	sts	0x006B, r1
     f90:	10 92 6a 00 	sts	0x006A, r1
     f94:	10 92 6d 00 	sts	0x006D, r1
     f98:	10 92 6c 00 	sts	0x006C, r1
     f9c:	10 92 6f 00 	sts	0x006F, r1
     fa0:	10 92 6e 00 	sts	0x006E, r1
     fa4:	10 92 71 00 	sts	0x0071, r1
     fa8:	10 92 70 00 	sts	0x0070, r1
     fac:	10 92 73 00 	sts	0x0073, r1
     fb0:	10 92 72 00 	sts	0x0072, r1
    	 LCD_clearScreen();
     fb4:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_clearScreen>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	aa ef       	ldi	r26, 0xFA	; 250
     fbe:	b3 e4       	ldi	r27, 0x43	; 67
     fc0:	8b 87       	std	Y+11, r24	; 0x0b
     fc2:	9c 87       	std	Y+12, r25	; 0x0c
     fc4:	ad 87       	std	Y+13, r26	; 0x0d
     fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fca:	7c 85       	ldd	r23, Y+12	; 0x0c
     fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fce:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	4a e7       	ldi	r20, 0x7A	; 122
     fd6:	53 e4       	ldi	r21, 0x43	; 67
     fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	8f 83       	std	Y+7, r24	; 0x07
     fe2:	98 87       	std	Y+8, r25	; 0x08
     fe4:	a9 87       	std	Y+9, r26	; 0x09
     fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe8:	6f 81       	ldd	r22, Y+7	; 0x07
     fea:	78 85       	ldd	r23, Y+8	; 0x08
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e8       	ldi	r20, 0x80	; 128
     ff6:	5f e3       	ldi	r21, 0x3F	; 63
     ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffc:	88 23       	and	r24, r24
     ffe:	2c f4       	brge	.+10     	; 0x100a <main+0x4c4>
		__ticks = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	3f c0       	rjmp	.+126    	; 0x1088 <main+0x542>
	else if (__tmp > 65535)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	3f ef       	ldi	r19, 0xFF	; 255
    1016:	4f e7       	ldi	r20, 0x7F	; 127
    1018:	57 e4       	ldi	r21, 0x47	; 71
    101a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101e:	18 16       	cp	r1, r24
    1020:	4c f5       	brge	.+82     	; 0x1074 <main+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1022:	6b 85       	ldd	r22, Y+11	; 0x0b
    1024:	7c 85       	ldd	r23, Y+12	; 0x0c
    1026:	8d 85       	ldd	r24, Y+13	; 0x0d
    1028:	9e 85       	ldd	r25, Y+14	; 0x0e
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	51 e4       	ldi	r21, 0x41	; 65
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	0f c0       	rjmp	.+30     	; 0x106a <main+0x524>
    104c:	89 e1       	ldi	r24, 0x19	; 25
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <main+0x512>
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	69 f7       	brne	.-38     	; 0x104c <main+0x506>
    1072:	30 ce       	rjmp	.-928    	; 0xcd4 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	78 85       	ldd	r23, Y+8	; 0x08
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	9a 85       	ldd	r25, Y+10	; 0x0a
    107c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <main+0x54e>
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	1b ce       	rjmp	.-970    	; 0xcd4 <main+0x18e>

0000109e <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <KeyPad_getPressedKey+0x6>
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    10a8:	1a 82       	std	Y+2, r1	; 0x02
    10aa:	4c c0       	rjmp	.+152    	; 0x1144 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    10ac:	ea e3       	ldi	r30, 0x3A	; 58
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	80 e1       	ldi	r24, 0x10	; 16
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <KeyPad_getPressedKey+0x22>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	2a 95       	dec	r18
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <KeyPad_getPressedKey+0x1e>
    10c4:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    10c6:	eb e3       	ldi	r30, 0x3B	; 59
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	80 e1       	ldi	r24, 0x10	; 16
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <KeyPad_getPressedKey+0x3e>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <KeyPad_getPressedKey+0x3a>
    10e0:	80 95       	com	r24
    10e2:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    10e4:	19 82       	std	Y+1, r1	; 0x01
    10e6:	28 c0       	rjmp	.+80     	; 0x1138 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    10e8:	e9 e3       	ldi	r30, 0x39	; 57
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <KeyPad_getPressedKey+0x62>
    10fc:	55 95       	asr	r21
    10fe:	47 95       	ror	r20
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <KeyPad_getPressedKey+0x5e>
    1104:	ca 01       	movw	r24, r20
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	91 f4       	brne	.+36     	; 0x1132 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	98 2f       	mov	r25, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	89 0f       	add	r24, r25
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	0e 94 a7 08 	call	0x114e	; 0x114e <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	a8 f2       	brcs	.-86     	; 0x10e8 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	08 f4       	brcc	.+2      	; 0x114c <KeyPad_getPressedKey+0xae>
    114a:	b0 cf       	rjmp	.-160    	; 0x10ac <KeyPad_getPressedKey+0xe>
    114c:	ad cf       	rjmp	.-166    	; 0x10a8 <KeyPad_getPressedKey+0xa>

0000114e <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <KeyPad_4x4_adjustKeyNumber+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <KeyPad_4x4_adjustKeyNumber+0x8>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3c 83       	std	Y+4, r19	; 0x04
    1164:	2b 83       	std	Y+3, r18	; 0x03
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	88 30       	cpi	r24, 0x08	; 8
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <KeyPad_4x4_adjustKeyNumber+0x24>
    1170:	70 c0       	rjmp	.+224    	; 0x1252 <KeyPad_4x4_adjustKeyNumber+0x104>
    1172:	2b 81       	ldd	r18, Y+3	; 0x03
    1174:	3c 81       	ldd	r19, Y+4	; 0x04
    1176:	29 30       	cpi	r18, 0x09	; 9
    1178:	31 05       	cpc	r19, r1
    117a:	5c f5       	brge	.+86     	; 0x11d2 <KeyPad_4x4_adjustKeyNumber+0x84>
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	91 05       	cpc	r25, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1186:	59 c0       	rjmp	.+178    	; 0x123a <KeyPad_4x4_adjustKeyNumber+0xec>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	25 30       	cpi	r18, 0x05	; 5
    118e:	31 05       	cpc	r19, r1
    1190:	9c f4       	brge	.+38     	; 0x11b8 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <KeyPad_4x4_adjustKeyNumber+0x50>
    119c:	48 c0       	rjmp	.+144    	; 0x122e <KeyPad_4x4_adjustKeyNumber+0xe0>
    119e:	2b 81       	ldd	r18, Y+3	; 0x03
    11a0:	3c 81       	ldd	r19, Y+4	; 0x04
    11a2:	23 30       	cpi	r18, 0x03	; 3
    11a4:	31 05       	cpc	r19, r1
    11a6:	0c f0       	brlt	.+2      	; 0x11aa <KeyPad_4x4_adjustKeyNumber+0x5c>
    11a8:	45 c0       	rjmp	.+138    	; 0x1234 <KeyPad_4x4_adjustKeyNumber+0xe6>
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <KeyPad_4x4_adjustKeyNumber+0x68>
    11b4:	39 c0       	rjmp	.+114    	; 0x1228 <KeyPad_4x4_adjustKeyNumber+0xda>
    11b6:	67 c0       	rjmp	.+206    	; 0x1286 <KeyPad_4x4_adjustKeyNumber+0x138>
    11b8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ba:	3c 81       	ldd	r19, Y+4	; 0x04
    11bc:	26 30       	cpi	r18, 0x06	; 6
    11be:	31 05       	cpc	r19, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <KeyPad_4x4_adjustKeyNumber+0x76>
    11c2:	41 c0       	rjmp	.+130    	; 0x1246 <KeyPad_4x4_adjustKeyNumber+0xf8>
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	87 30       	cpi	r24, 0x07	; 7
    11ca:	91 05       	cpc	r25, r1
    11cc:	0c f0       	brlt	.+2      	; 0x11d0 <KeyPad_4x4_adjustKeyNumber+0x82>
    11ce:	3e c0       	rjmp	.+124    	; 0x124c <KeyPad_4x4_adjustKeyNumber+0xfe>
    11d0:	37 c0       	rjmp	.+110    	; 0x1240 <KeyPad_4x4_adjustKeyNumber+0xf2>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	2c 30       	cpi	r18, 0x0C	; 12
    11d8:	31 05       	cpc	r19, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <KeyPad_4x4_adjustKeyNumber+0x90>
    11dc:	46 c0       	rjmp	.+140    	; 0x126a <KeyPad_4x4_adjustKeyNumber+0x11c>
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	8d 30       	cpi	r24, 0x0D	; 13
    11e4:	91 05       	cpc	r25, r1
    11e6:	5c f4       	brge	.+22     	; 0x11fe <KeyPad_4x4_adjustKeyNumber+0xb0>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	2a 30       	cpi	r18, 0x0A	; 10
    11ee:	31 05       	cpc	r19, r1
    11f0:	b1 f1       	breq	.+108    	; 0x125e <KeyPad_4x4_adjustKeyNumber+0x110>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	8b 30       	cpi	r24, 0x0B	; 11
    11f8:	91 05       	cpc	r25, r1
    11fa:	a4 f5       	brge	.+104    	; 0x1264 <KeyPad_4x4_adjustKeyNumber+0x116>
    11fc:	2d c0       	rjmp	.+90     	; 0x1258 <KeyPad_4x4_adjustKeyNumber+0x10a>
    11fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1200:	3c 81       	ldd	r19, Y+4	; 0x04
    1202:	2e 30       	cpi	r18, 0x0E	; 14
    1204:	31 05       	cpc	r19, r1
    1206:	b9 f1       	breq	.+110    	; 0x1276 <KeyPad_4x4_adjustKeyNumber+0x128>
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	8e 30       	cpi	r24, 0x0E	; 14
    120e:	91 05       	cpc	r25, r1
    1210:	7c f1       	brlt	.+94     	; 0x1270 <KeyPad_4x4_adjustKeyNumber+0x122>
    1212:	2b 81       	ldd	r18, Y+3	; 0x03
    1214:	3c 81       	ldd	r19, Y+4	; 0x04
    1216:	2f 30       	cpi	r18, 0x0F	; 15
    1218:	31 05       	cpc	r19, r1
    121a:	79 f1       	breq	.+94     	; 0x127a <KeyPad_4x4_adjustKeyNumber+0x12c>
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	80 31       	cpi	r24, 0x10	; 16
    1222:	91 05       	cpc	r25, r1
    1224:	69 f1       	breq	.+90     	; 0x1280 <KeyPad_4x4_adjustKeyNumber+0x132>
    1226:	2f c0       	rjmp	.+94     	; 0x1286 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1228:	97 e0       	ldi	r25, 0x07	; 7
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	2e c0       	rjmp	.+92     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    122e:	28 e0       	ldi	r18, 0x08	; 8
    1230:	2a 83       	std	Y+2, r18	; 0x02
    1232:	2b c0       	rjmp	.+86     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1234:	39 e0       	ldi	r19, 0x09	; 9
    1236:	3a 83       	std	Y+2, r19	; 0x02
    1238:	28 c0       	rjmp	.+80     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    123a:	85 e2       	ldi	r24, 0x25	; 37
    123c:	8a 83       	std	Y+2, r24	; 0x02
    123e:	25 c0       	rjmp	.+74     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1240:	94 e0       	ldi	r25, 0x04	; 4
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	22 c0       	rjmp	.+68     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1246:	25 e0       	ldi	r18, 0x05	; 5
    1248:	2a 83       	std	Y+2, r18	; 0x02
    124a:	1f c0       	rjmp	.+62     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    124c:	36 e0       	ldi	r19, 0x06	; 6
    124e:	3a 83       	std	Y+2, r19	; 0x02
    1250:	1c c0       	rjmp	.+56     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1252:	8a e2       	ldi	r24, 0x2A	; 42
    1254:	8a 83       	std	Y+2, r24	; 0x02
    1256:	19 c0       	rjmp	.+50     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	16 c0       	rjmp	.+44     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    125e:	22 e0       	ldi	r18, 0x02	; 2
    1260:	2a 83       	std	Y+2, r18	; 0x02
    1262:	13 c0       	rjmp	.+38     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1264:	33 e0       	ldi	r19, 0x03	; 3
    1266:	3a 83       	std	Y+2, r19	; 0x02
    1268:	10 c0       	rjmp	.+32     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    126a:	8d e2       	ldi	r24, 0x2D	; 45
    126c:	8a 83       	std	Y+2, r24	; 0x02
    126e:	0d c0       	rjmp	.+26     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 'x';  /* ASCII of Enter */
    1270:	98 e7       	ldi	r25, 0x78	; 120
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	0a c0       	rjmp	.+20     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1276:	1a 82       	std	Y+2, r1	; 0x02
    1278:	08 c0       	rjmp	.+16     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    127a:	2d e3       	ldi	r18, 0x3D	; 61
    127c:	2a 83       	std	Y+2, r18	; 0x02
    127e:	05 c0       	rjmp	.+10     	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1280:	3b e2       	ldi	r19, 0x2B	; 43
    1282:	3a 83       	std	Y+2, r19	; 0x02
    1284:	02 c0       	rjmp	.+4      	; 0x128a <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	8a 83       	std	Y+2, r24	; 0x02
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    12a2:	a7 e3       	ldi	r26, 0x37	; 55
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e7 e3       	ldi	r30, 0x37	; 55
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8e 60       	ori	r24, 0x0E	; 14
    12ae:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    12b0:	a1 e3       	ldi	r26, 0x31	; 49
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e1 e3       	ldi	r30, 0x31	; 49
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 60       	ori	r24, 0x0F	; 15
    12bc:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    12c4:	88 e2       	ldi	r24, 0x28	; 40
    12c6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    12ca:	8c e0       	ldi	r24, 0x0C	; 12
    12cc:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_sendCommand>
}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	c3 56       	subi	r28, 0x63	; 99
    12ea:	d0 40       	sbci	r29, 0x00	; 0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	fe 01       	movw	r30, r28
    12f8:	ed 59       	subi	r30, 0x9D	; 157
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    12fe:	a8 e3       	ldi	r26, 0x38	; 56
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	8d 7f       	andi	r24, 0xFD	; 253
    130a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	8b 7f       	andi	r24, 0xFB	; 251
    1318:	8c 93       	st	X, r24
    131a:	fe 01       	movw	r30, r28
    131c:	e1 5a       	subi	r30, 0xA1	; 161
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e8       	ldi	r26, 0x80	; 128
    1326:	bf e3       	ldi	r27, 0x3F	; 63
    1328:	80 83       	st	Z, r24
    132a:	91 83       	std	Z+1, r25	; 0x01
    132c:	a2 83       	std	Z+2, r26	; 0x02
    132e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	8e 01       	movw	r16, r28
    1332:	05 5a       	subi	r16, 0xA5	; 165
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	fe 01       	movw	r30, r28
    1338:	e1 5a       	subi	r30, 0xA1	; 161
    133a:	ff 4f       	sbci	r31, 0xFF	; 255
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	4a e7       	ldi	r20, 0x7A	; 122
    134a:	53 e4       	ldi	r21, 0x43	; 67
    134c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	f8 01       	movw	r30, r16
    1356:	80 83       	st	Z, r24
    1358:	91 83       	std	Z+1, r25	; 0x01
    135a:	a2 83       	std	Z+2, r26	; 0x02
    135c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    135e:	fe 01       	movw	r30, r28
    1360:	e5 5a       	subi	r30, 0xA5	; 165
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	60 81       	ld	r22, Z
    1366:	71 81       	ldd	r23, Z+1	; 0x01
    1368:	82 81       	ldd	r24, Z+2	; 0x02
    136a:	93 81       	ldd	r25, Z+3	; 0x03
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e8       	ldi	r20, 0x80	; 128
    1372:	5f e3       	ldi	r21, 0x3F	; 63
    1374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1378:	88 23       	and	r24, r24
    137a:	44 f4       	brge	.+16     	; 0x138c <LCD_sendCommand+0xb0>
		__ticks = 1;
    137c:	fe 01       	movw	r30, r28
    137e:	e7 5a       	subi	r30, 0xA7	; 167
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
    138a:	64 c0       	rjmp	.+200    	; 0x1454 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    138c:	fe 01       	movw	r30, r28
    138e:	e5 5a       	subi	r30, 0xA5	; 165
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	3f ef       	ldi	r19, 0xFF	; 255
    139e:	4f e7       	ldi	r20, 0x7F	; 127
    13a0:	57 e4       	ldi	r21, 0x47	; 71
    13a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13a6:	18 16       	cp	r1, r24
    13a8:	0c f0       	brlt	.+2      	; 0x13ac <LCD_sendCommand+0xd0>
    13aa:	43 c0       	rjmp	.+134    	; 0x1432 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	fe 01       	movw	r30, r28
    13ae:	e1 5a       	subi	r30, 0xA1	; 161
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	8e 01       	movw	r16, r28
    13cc:	07 5a       	subi	r16, 0xA7	; 167
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	f8 01       	movw	r30, r16
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	80 83       	st	Z, r24
    13e2:	1f c0       	rjmp	.+62     	; 0x1422 <LCD_sendCommand+0x146>
    13e4:	fe 01       	movw	r30, r28
    13e6:	e9 5a       	subi	r30, 0xA9	; 169
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	89 e1       	ldi	r24, 0x19	; 25
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	91 83       	std	Z+1, r25	; 0x01
    13f0:	80 83       	st	Z, r24
    13f2:	fe 01       	movw	r30, r28
    13f4:	e9 5a       	subi	r30, 0xA9	; 169
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <LCD_sendCommand+0x120>
    1400:	fe 01       	movw	r30, r28
    1402:	e9 5a       	subi	r30, 0xA9	; 169
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140a:	de 01       	movw	r26, r28
    140c:	a7 5a       	subi	r26, 0xA7	; 167
    140e:	bf 4f       	sbci	r27, 0xFF	; 255
    1410:	fe 01       	movw	r30, r28
    1412:	e7 5a       	subi	r30, 0xA7	; 167
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 81       	ld	r24, Z
    1418:	91 81       	ldd	r25, Z+1	; 0x01
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	11 96       	adiw	r26, 0x01	; 1
    141e:	9c 93       	st	X, r25
    1420:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1422:	fe 01       	movw	r30, r28
    1424:	e7 5a       	subi	r30, 0xA7	; 167
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	d1 f6       	brne	.-76     	; 0x13e4 <LCD_sendCommand+0x108>
    1430:	27 c0       	rjmp	.+78     	; 0x1480 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	8e 01       	movw	r16, r28
    1434:	07 5a       	subi	r16, 0xA7	; 167
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	e5 5a       	subi	r30, 0xA5	; 165
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	f8 01       	movw	r30, r16
    1450:	91 83       	std	Z+1, r25	; 0x01
    1452:	80 83       	st	Z, r24
    1454:	de 01       	movw	r26, r28
    1456:	ab 5a       	subi	r26, 0xAB	; 171
    1458:	bf 4f       	sbci	r27, 0xFF	; 255
    145a:	fe 01       	movw	r30, r28
    145c:	e7 5a       	subi	r30, 0xA7	; 167
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 81       	ld	r24, Z
    1462:	91 81       	ldd	r25, Z+1	; 0x01
    1464:	8d 93       	st	X+, r24
    1466:	9c 93       	st	X, r25
    1468:	fe 01       	movw	r30, r28
    146a:	eb 5a       	subi	r30, 0xAB	; 171
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_sendCommand+0x196>
    1476:	fe 01       	movw	r30, r28
    1478:	eb 5a       	subi	r30, 0xAB	; 171
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1480:	a8 e3       	ldi	r26, 0x38	; 56
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e3       	ldi	r30, 0x38	; 56
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	88 60       	ori	r24, 0x08	; 8
    148c:	8c 93       	st	X, r24
    148e:	fe 01       	movw	r30, r28
    1490:	ef 5a       	subi	r30, 0xAF	; 175
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e8       	ldi	r26, 0x80	; 128
    149a:	bf e3       	ldi	r27, 0x3F	; 63
    149c:	80 83       	st	Z, r24
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	a2 83       	std	Z+2, r26	; 0x02
    14a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	8e 01       	movw	r16, r28
    14a6:	03 5b       	subi	r16, 0xB3	; 179
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	fe 01       	movw	r30, r28
    14ac:	ef 5a       	subi	r30, 0xAF	; 175
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	60 81       	ld	r22, Z
    14b2:	71 81       	ldd	r23, Z+1	; 0x01
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	4a e7       	ldi	r20, 0x7A	; 122
    14be:	53 e4       	ldi	r21, 0x43	; 67
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	f8 01       	movw	r30, r16
    14ca:	80 83       	st	Z, r24
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	a2 83       	std	Z+2, r26	; 0x02
    14d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14d2:	fe 01       	movw	r30, r28
    14d4:	e3 5b       	subi	r30, 0xB3	; 179
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	44 f4       	brge	.+16     	; 0x1500 <LCD_sendCommand+0x224>
		__ticks = 1;
    14f0:	fe 01       	movw	r30, r28
    14f2:	e5 5b       	subi	r30, 0xB5	; 181
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	91 83       	std	Z+1, r25	; 0x01
    14fc:	80 83       	st	Z, r24
    14fe:	64 c0       	rjmp	.+200    	; 0x15c8 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1500:	fe 01       	movw	r30, r28
    1502:	e3 5b       	subi	r30, 0xB3	; 179
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	93 81       	ldd	r25, Z+3	; 0x03
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	3f ef       	ldi	r19, 0xFF	; 255
    1512:	4f e7       	ldi	r20, 0x7F	; 127
    1514:	57 e4       	ldi	r21, 0x47	; 71
    1516:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    151a:	18 16       	cp	r1, r24
    151c:	0c f0       	brlt	.+2      	; 0x1520 <LCD_sendCommand+0x244>
    151e:	43 c0       	rjmp	.+134    	; 0x15a6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1520:	fe 01       	movw	r30, r28
    1522:	ef 5a       	subi	r30, 0xAF	; 175
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e2       	ldi	r20, 0x20	; 32
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8e 01       	movw	r16, r28
    1540:	05 5b       	subi	r16, 0xB5	; 181
    1542:	1f 4f       	sbci	r17, 0xFF	; 255
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	f8 01       	movw	r30, r16
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
    1556:	1f c0       	rjmp	.+62     	; 0x1596 <LCD_sendCommand+0x2ba>
    1558:	fe 01       	movw	r30, r28
    155a:	e7 5b       	subi	r30, 0xB7	; 183
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	89 e1       	ldi	r24, 0x19	; 25
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	fe 01       	movw	r30, r28
    1568:	e7 5b       	subi	r30, 0xB7	; 183
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	91 81       	ldd	r25, Z+1	; 0x01
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <LCD_sendCommand+0x294>
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5b       	subi	r30, 0xB7	; 183
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157e:	de 01       	movw	r26, r28
    1580:	a5 5b       	subi	r26, 0xB5	; 181
    1582:	bf 4f       	sbci	r27, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	e5 5b       	subi	r30, 0xB5	; 181
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	9c 93       	st	X, r25
    1594:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1596:	fe 01       	movw	r30, r28
    1598:	e5 5b       	subi	r30, 0xB5	; 181
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	d1 f6       	brne	.-76     	; 0x1558 <LCD_sendCommand+0x27c>
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a6:	8e 01       	movw	r16, r28
    15a8:	05 5b       	subi	r16, 0xB5	; 181
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	fe 01       	movw	r30, r28
    15ae:	e3 5b       	subi	r30, 0xB3	; 179
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	f8 01       	movw	r30, r16
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	80 83       	st	Z, r24
    15c8:	de 01       	movw	r26, r28
    15ca:	a9 5b       	subi	r26, 0xB9	; 185
    15cc:	bf 4f       	sbci	r27, 0xFF	; 255
    15ce:	fe 01       	movw	r30, r28
    15d0:	e5 5b       	subi	r30, 0xB5	; 181
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
    15d8:	8d 93       	st	X+, r24
    15da:	9c 93       	st	X, r25
    15dc:	fe 01       	movw	r30, r28
    15de:	e9 5b       	subi	r30, 0xB9	; 185
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	f1 f7       	brne	.-4      	; 0x15e6 <LCD_sendCommand+0x30a>
    15ea:	fe 01       	movw	r30, r28
    15ec:	e9 5b       	subi	r30, 0xB9	; 185
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    15f4:	a2 e3       	ldi	r26, 0x32	; 50
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e2 e3       	ldi	r30, 0x32	; 50
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	98 2f       	mov	r25, r24
    1600:	90 7f       	andi	r25, 0xF0	; 240
    1602:	fe 01       	movw	r30, r28
    1604:	ed 59       	subi	r30, 0x9D	; 157
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	80 81       	ld	r24, Z
    160a:	82 95       	swap	r24
    160c:	8f 70       	andi	r24, 0x0F	; 15
    160e:	89 2b       	or	r24, r25
    1610:	8c 93       	st	X, r24
    1612:	fe 01       	movw	r30, r28
    1614:	ed 5b       	subi	r30, 0xBD	; 189
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a0 e8       	ldi	r26, 0x80	; 128
    161e:	bf e3       	ldi	r27, 0x3F	; 63
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	8e 01       	movw	r16, r28
    162a:	01 5c       	subi	r16, 0xC1	; 193
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	fe 01       	movw	r30, r28
    1630:	ed 5b       	subi	r30, 0xBD	; 189
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a e7       	ldi	r20, 0x7A	; 122
    1642:	53 e4       	ldi	r21, 0x43	; 67
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	f8 01       	movw	r30, r16
    164e:	80 83       	st	Z, r24
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	a2 83       	std	Z+2, r26	; 0x02
    1654:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1656:	fe 01       	movw	r30, r28
    1658:	ff 96       	adiw	r30, 0x3f	; 63
    165a:	60 81       	ld	r22, Z
    165c:	71 81       	ldd	r23, Z+1	; 0x01
    165e:	82 81       	ldd	r24, Z+2	; 0x02
    1660:	93 81       	ldd	r25, Z+3	; 0x03
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e8       	ldi	r20, 0x80	; 128
    1668:	5f e3       	ldi	r21, 0x3F	; 63
    166a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    166e:	88 23       	and	r24, r24
    1670:	2c f4       	brge	.+10     	; 0x167c <LCD_sendCommand+0x3a0>
		__ticks = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9e af       	std	Y+62, r25	; 0x3e
    1678:	8d af       	std	Y+61, r24	; 0x3d
    167a:	46 c0       	rjmp	.+140    	; 0x1708 <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    167c:	fe 01       	movw	r30, r28
    167e:	ff 96       	adiw	r30, 0x3f	; 63
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	57 e4       	ldi	r21, 0x47	; 71
    1690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	64 f5       	brge	.+88     	; 0x16f0 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1698:	fe 01       	movw	r30, r28
    169a:	ed 5b       	subi	r30, 0xBD	; 189
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	60 81       	ld	r22, Z
    16a0:	71 81       	ldd	r23, Z+1	; 0x01
    16a2:	82 81       	ldd	r24, Z+2	; 0x02
    16a4:	93 81       	ldd	r25, Z+3	; 0x03
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e2       	ldi	r20, 0x20	; 32
    16ac:	51 e4       	ldi	r21, 0x41	; 65
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9e af       	std	Y+62, r25	; 0x3e
    16c4:	8d af       	std	Y+61, r24	; 0x3d
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <LCD_sendCommand+0x40a>
    16c8:	89 e1       	ldi	r24, 0x19	; 25
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c af       	std	Y+60, r25	; 0x3c
    16ce:	8b af       	std	Y+59, r24	; 0x3b
    16d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    16d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <LCD_sendCommand+0x3f8>
    16d8:	9c af       	std	Y+60, r25	; 0x3c
    16da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    16de:	9e ad       	ldd	r25, Y+62	; 0x3e
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9e af       	std	Y+62, r25	; 0x3e
    16e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <LCD_sendCommand+0x3ec>
    16ee:	16 c0       	rjmp	.+44     	; 0x171c <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f0:	fe 01       	movw	r30, r28
    16f2:	ff 96       	adiw	r30, 0x3f	; 63
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e af       	std	Y+62, r25	; 0x3e
    1706:	8d af       	std	Y+61, r24	; 0x3d
    1708:	8d ad       	ldd	r24, Y+61	; 0x3d
    170a:	9e ad       	ldd	r25, Y+62	; 0x3e
    170c:	9a af       	std	Y+58, r25	; 0x3a
    170e:	89 af       	std	Y+57, r24	; 0x39
    1710:	89 ad       	ldd	r24, Y+57	; 0x39
    1712:	9a ad       	ldd	r25, Y+58	; 0x3a
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <LCD_sendCommand+0x438>
    1718:	9a af       	std	Y+58, r25	; 0x3a
    171a:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    171c:	a8 e3       	ldi	r26, 0x38	; 56
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	87 7f       	andi	r24, 0xF7	; 247
    1728:	8c 93       	st	X, r24
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 e8       	ldi	r26, 0x80	; 128
    1730:	bf e3       	ldi	r27, 0x3F	; 63
    1732:	8d ab       	std	Y+53, r24	; 0x35
    1734:	9e ab       	std	Y+54, r25	; 0x36
    1736:	af ab       	std	Y+55, r26	; 0x37
    1738:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173a:	6d a9       	ldd	r22, Y+53	; 0x35
    173c:	7e a9       	ldd	r23, Y+54	; 0x36
    173e:	8f a9       	ldd	r24, Y+55	; 0x37
    1740:	98 ad       	ldd	r25, Y+56	; 0x38
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a e7       	ldi	r20, 0x7A	; 122
    1748:	53 e4       	ldi	r21, 0x43	; 67
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	89 ab       	std	Y+49, r24	; 0x31
    1754:	9a ab       	std	Y+50, r25	; 0x32
    1756:	ab ab       	std	Y+51, r26	; 0x33
    1758:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    175a:	69 a9       	ldd	r22, Y+49	; 0x31
    175c:	7a a9       	ldd	r23, Y+50	; 0x32
    175e:	8b a9       	ldd	r24, Y+51	; 0x33
    1760:	9c a9       	ldd	r25, Y+52	; 0x34
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <LCD_sendCommand+0x4a0>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	98 ab       	std	Y+48, r25	; 0x30
    1778:	8f a7       	std	Y+47, r24	; 0x2f
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    177c:	69 a9       	ldd	r22, Y+49	; 0x31
    177e:	7a a9       	ldd	r23, Y+50	; 0x32
    1780:	8b a9       	ldd	r24, Y+51	; 0x33
    1782:	9c a9       	ldd	r25, Y+52	; 0x34
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	4c f5       	brge	.+82     	; 0x17e6 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	6d a9       	ldd	r22, Y+53	; 0x35
    1796:	7e a9       	ldd	r23, Y+54	; 0x36
    1798:	8f a9       	ldd	r24, Y+55	; 0x37
    179a:	98 ad       	ldd	r25, Y+56	; 0x38
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <LCD_sendCommand+0x500>
    17be:	89 e1       	ldi	r24, 0x19	; 25
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9e a7       	std	Y+46, r25	; 0x2e
    17c4:	8d a7       	std	Y+45, r24	; 0x2d
    17c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    17c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_sendCommand+0x4ee>
    17ce:	9e a7       	std	Y+46, r25	; 0x2e
    17d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d4:	98 a9       	ldd	r25, Y+48	; 0x30
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	98 ab       	std	Y+48, r25	; 0x30
    17da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17de:	98 a9       	ldd	r25, Y+48	; 0x30
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	69 f7       	brne	.-38     	; 0x17be <LCD_sendCommand+0x4e2>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e6:	69 a9       	ldd	r22, Y+49	; 0x31
    17e8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ea:	8b a9       	ldd	r24, Y+51	; 0x33
    17ec:	9c a9       	ldd	r25, Y+52	; 0x34
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	98 ab       	std	Y+48, r25	; 0x30
    17f8:	8f a7       	std	Y+47, r24	; 0x2f
    17fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fc:	98 a9       	ldd	r25, Y+48	; 0x30
    17fe:	9c a7       	std	Y+44, r25	; 0x2c
    1800:	8b a7       	std	Y+43, r24	; 0x2b
    1802:	8b a5       	ldd	r24, Y+43	; 0x2b
    1804:	9c a5       	ldd	r25, Y+44	; 0x2c
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_sendCommand+0x52a>
    180a:	9c a7       	std	Y+44, r25	; 0x2c
    180c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    180e:	a8 e3       	ldi	r26, 0x38	; 56
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	88 60       	ori	r24, 0x08	; 8
    181a:	8c 93       	st	X, r24
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	a0 e8       	ldi	r26, 0x80	; 128
    1822:	bf e3       	ldi	r27, 0x3F	; 63
    1824:	8f a3       	std	Y+39, r24	; 0x27
    1826:	98 a7       	std	Y+40, r25	; 0x28
    1828:	a9 a7       	std	Y+41, r26	; 0x29
    182a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182c:	6f a1       	ldd	r22, Y+39	; 0x27
    182e:	78 a5       	ldd	r23, Y+40	; 0x28
    1830:	89 a5       	ldd	r24, Y+41	; 0x29
    1832:	9a a5       	ldd	r25, Y+42	; 0x2a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a e7       	ldi	r20, 0x7A	; 122
    183a:	53 e4       	ldi	r21, 0x43	; 67
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	8b a3       	std	Y+35, r24	; 0x23
    1846:	9c a3       	std	Y+36, r25	; 0x24
    1848:	ad a3       	std	Y+37, r26	; 0x25
    184a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    184c:	6b a1       	ldd	r22, Y+35	; 0x23
    184e:	7c a1       	ldd	r23, Y+36	; 0x24
    1850:	8d a1       	ldd	r24, Y+37	; 0x25
    1852:	9e a1       	ldd	r25, Y+38	; 0x26
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1860:	88 23       	and	r24, r24
    1862:	2c f4       	brge	.+10     	; 0x186e <LCD_sendCommand+0x592>
		__ticks = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	9a a3       	std	Y+34, r25	; 0x22
    186a:	89 a3       	std	Y+33, r24	; 0x21
    186c:	3f c0       	rjmp	.+126    	; 0x18ec <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    186e:	6b a1       	ldd	r22, Y+35	; 0x23
    1870:	7c a1       	ldd	r23, Y+36	; 0x24
    1872:	8d a1       	ldd	r24, Y+37	; 0x25
    1874:	9e a1       	ldd	r25, Y+38	; 0x26
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	4c f5       	brge	.+82     	; 0x18d8 <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1886:	6f a1       	ldd	r22, Y+39	; 0x27
    1888:	78 a5       	ldd	r23, Y+40	; 0x28
    188a:	89 a5       	ldd	r24, Y+41	; 0x29
    188c:	9a a5       	ldd	r25, Y+42	; 0x2a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9a a3       	std	Y+34, r25	; 0x22
    18ac:	89 a3       	std	Y+33, r24	; 0x21
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <LCD_sendCommand+0x5f2>
    18b0:	89 e1       	ldi	r24, 0x19	; 25
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	98 a3       	std	Y+32, r25	; 0x20
    18b6:	8f 8f       	std	Y+31, r24	; 0x1f
    18b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18ba:	98 a1       	ldd	r25, Y+32	; 0x20
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_sendCommand+0x5e0>
    18c0:	98 a3       	std	Y+32, r25	; 0x20
    18c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	89 a1       	ldd	r24, Y+33	; 0x21
    18c6:	9a a1       	ldd	r25, Y+34	; 0x22
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	9a a3       	std	Y+34, r25	; 0x22
    18cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	9a a1       	ldd	r25, Y+34	; 0x22
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <LCD_sendCommand+0x5d4>
    18d6:	14 c0       	rjmp	.+40     	; 0x1900 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9a a3       	std	Y+34, r25	; 0x22
    18ea:	89 a3       	std	Y+33, r24	; 0x21
    18ec:	89 a1       	ldd	r24, Y+33	; 0x21
    18ee:	9a a1       	ldd	r25, Y+34	; 0x22
    18f0:	9e 8f       	std	Y+30, r25	; 0x1e
    18f2:	8d 8f       	std	Y+29, r24	; 0x1d
    18f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18f8:	01 97       	sbiw	r24, 0x01	; 1
    18fa:	f1 f7       	brne	.-4      	; 0x18f8 <LCD_sendCommand+0x61c>
    18fc:	9e 8f       	std	Y+30, r25	; 0x1e
    18fe:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1900:	a2 e3       	ldi	r26, 0x32	; 50
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e2 e3       	ldi	r30, 0x32	; 50
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	98 2f       	mov	r25, r24
    190c:	90 7f       	andi	r25, 0xF0	; 240
    190e:	fe 01       	movw	r30, r28
    1910:	ed 59       	subi	r30, 0x9D	; 157
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	8f 70       	andi	r24, 0x0F	; 15
    1918:	89 2b       	or	r24, r25
    191a:	8c 93       	st	X, r24
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 e8       	ldi	r26, 0x80	; 128
    1922:	bf e3       	ldi	r27, 0x3F	; 63
    1924:	89 8f       	std	Y+25, r24	; 0x19
    1926:	9a 8f       	std	Y+26, r25	; 0x1a
    1928:	ab 8f       	std	Y+27, r26	; 0x1b
    192a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192c:	69 8d       	ldd	r22, Y+25	; 0x19
    192e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1930:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1932:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	4a e7       	ldi	r20, 0x7A	; 122
    193a:	53 e4       	ldi	r21, 0x43	; 67
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	8d 8b       	std	Y+21, r24	; 0x15
    1946:	9e 8b       	std	Y+22, r25	; 0x16
    1948:	af 8b       	std	Y+23, r26	; 0x17
    194a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    194c:	6d 89       	ldd	r22, Y+21	; 0x15
    194e:	7e 89       	ldd	r23, Y+22	; 0x16
    1950:	8f 89       	ldd	r24, Y+23	; 0x17
    1952:	98 8d       	ldd	r25, Y+24	; 0x18
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1960:	88 23       	and	r24, r24
    1962:	2c f4       	brge	.+10     	; 0x196e <LCD_sendCommand+0x692>
		__ticks = 1;
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 8b       	std	Y+20, r25	; 0x14
    196a:	8b 8b       	std	Y+19, r24	; 0x13
    196c:	3f c0       	rjmp	.+126    	; 0x19ec <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    196e:	6d 89       	ldd	r22, Y+21	; 0x15
    1970:	7e 89       	ldd	r23, Y+22	; 0x16
    1972:	8f 89       	ldd	r24, Y+23	; 0x17
    1974:	98 8d       	ldd	r25, Y+24	; 0x18
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	3f ef       	ldi	r19, 0xFF	; 255
    197a:	4f e7       	ldi	r20, 0x7F	; 127
    197c:	57 e4       	ldi	r21, 0x47	; 71
    197e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1982:	18 16       	cp	r1, r24
    1984:	4c f5       	brge	.+82     	; 0x19d8 <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1986:	69 8d       	ldd	r22, Y+25	; 0x19
    1988:	7a 8d       	ldd	r23, Y+26	; 0x1a
    198a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e2       	ldi	r20, 0x20	; 32
    1994:	51 e4       	ldi	r21, 0x41	; 65
    1996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199a:	dc 01       	movw	r26, r24
    199c:	cb 01       	movw	r24, r22
    199e:	bc 01       	movw	r22, r24
    19a0:	cd 01       	movw	r24, r26
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	9c 8b       	std	Y+20, r25	; 0x14
    19ac:	8b 8b       	std	Y+19, r24	; 0x13
    19ae:	0f c0       	rjmp	.+30     	; 0x19ce <LCD_sendCommand+0x6f2>
    19b0:	89 e1       	ldi	r24, 0x19	; 25
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	9a 8b       	std	Y+18, r25	; 0x12
    19b6:	89 8b       	std	Y+17, r24	; 0x11
    19b8:	89 89       	ldd	r24, Y+17	; 0x11
    19ba:	9a 89       	ldd	r25, Y+18	; 0x12
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <LCD_sendCommand+0x6e0>
    19c0:	9a 8b       	std	Y+18, r25	; 0x12
    19c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c4:	8b 89       	ldd	r24, Y+19	; 0x13
    19c6:	9c 89       	ldd	r25, Y+20	; 0x14
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	9c 8b       	std	Y+20, r25	; 0x14
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ce:	8b 89       	ldd	r24, Y+19	; 0x13
    19d0:	9c 89       	ldd	r25, Y+20	; 0x14
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	69 f7       	brne	.-38     	; 0x19b0 <LCD_sendCommand+0x6d4>
    19d6:	14 c0       	rjmp	.+40     	; 0x1a00 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d8:	6d 89       	ldd	r22, Y+21	; 0x15
    19da:	7e 89       	ldd	r23, Y+22	; 0x16
    19dc:	8f 89       	ldd	r24, Y+23	; 0x17
    19de:	98 8d       	ldd	r25, Y+24	; 0x18
    19e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	9c 8b       	std	Y+20, r25	; 0x14
    19ea:	8b 8b       	std	Y+19, r24	; 0x13
    19ec:	8b 89       	ldd	r24, Y+19	; 0x13
    19ee:	9c 89       	ldd	r25, Y+20	; 0x14
    19f0:	98 8b       	std	Y+16, r25	; 0x10
    19f2:	8f 87       	std	Y+15, r24	; 0x0f
    19f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f6:	98 89       	ldd	r25, Y+16	; 0x10
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_sendCommand+0x71c>
    19fc:	98 8b       	std	Y+16, r25	; 0x10
    19fe:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1a00:	a8 e3       	ldi	r26, 0x38	; 56
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e8 e3       	ldi	r30, 0x38	; 56
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	87 7f       	andi	r24, 0xF7	; 247
    1a0c:	8c 93       	st	X, r24
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	bf e3       	ldi	r27, 0x3F	; 63
    1a16:	8b 87       	std	Y+11, r24	; 0x0b
    1a18:	9c 87       	std	Y+12, r25	; 0x0c
    1a1a:	ad 87       	std	Y+13, r26	; 0x0d
    1a1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8f 83       	std	Y+7, r24	; 0x07
    1a38:	98 87       	std	Y+8, r25	; 0x08
    1a3a:	a9 87       	std	Y+9, r26	; 0x09
    1a3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_sendCommand+0x784>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9e 83       	std	Y+6, r25	; 0x06
    1a5c:	8d 83       	std	Y+5, r24	; 0x05
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    1a60:	6f 81       	ldd	r22, Y+7	; 0x07
    1a62:	78 85       	ldd	r23, Y+8	; 0x08
    1a64:	89 85       	ldd	r24, Y+9	; 0x09
    1a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_sendCommand+0x7e4>
    1aa2:	89 e1       	ldi	r24, 0x19	; 25
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_sendCommand+0x7d2>
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_sendCommand+0x7c6>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_sendCommand+0x80e>
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1af2:	cd 59       	subi	r28, 0x9D	; 157
    1af4:	df 4f       	sbci	r29, 0xFF	; 255
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	c3 56       	subi	r28, 0x63	; 99
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	fe 01       	movw	r30, r28
    1b26:	ed 59       	subi	r30, 0x9D	; 157
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1b2c:	a8 e3       	ldi	r26, 0x38	; 56
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e8 e3       	ldi	r30, 0x38	; 56
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	82 60       	ori	r24, 0x02	; 2
    1b38:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1b3a:	a8 e3       	ldi	r26, 0x38	; 56
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e8 e3       	ldi	r30, 0x38	; 56
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8b 7f       	andi	r24, 0xFB	; 251
    1b46:	8c 93       	st	X, r24
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e1 5a       	subi	r30, 0xA1	; 161
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e8       	ldi	r26, 0x80	; 128
    1b54:	bf e3       	ldi	r27, 0x3F	; 63
    1b56:	80 83       	st	Z, r24
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	a2 83       	std	Z+2, r26	; 0x02
    1b5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	8e 01       	movw	r16, r28
    1b60:	05 5a       	subi	r16, 0xA5	; 165
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	fe 01       	movw	r30, r28
    1b66:	e1 5a       	subi	r30, 0xA1	; 161
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	4a e7       	ldi	r20, 0x7A	; 122
    1b78:	53 e4       	ldi	r21, 0x43	; 67
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	f8 01       	movw	r30, r16
    1b84:	80 83       	st	Z, r24
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	a2 83       	std	Z+2, r26	; 0x02
    1b8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e5 5a       	subi	r30, 0xA5	; 165
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e8       	ldi	r20, 0x80	; 128
    1ba0:	5f e3       	ldi	r21, 0x3F	; 63
    1ba2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba6:	88 23       	and	r24, r24
    1ba8:	44 f4       	brge	.+16     	; 0x1bba <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1baa:	fe 01       	movw	r30, r28
    1bac:	e7 5a       	subi	r30, 0xA7	; 167
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	80 83       	st	Z, r24
    1bb8:	64 c0       	rjmp	.+200    	; 0x1c82 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e5 5a       	subi	r30, 0xA5	; 165
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	4f e7       	ldi	r20, 0x7F	; 127
    1bce:	57 e4       	ldi	r21, 0x47	; 71
    1bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd4:	18 16       	cp	r1, r24
    1bd6:	0c f0       	brlt	.+2      	; 0x1bda <LCD_displayCharacter+0xd0>
    1bd8:	43 c0       	rjmp	.+134    	; 0x1c60 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e1 5a       	subi	r30, 0xA1	; 161
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8e 01       	movw	r16, r28
    1bfa:	07 5a       	subi	r16, 0xA7	; 167
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	f8 01       	movw	r30, r16
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	1f c0       	rjmp	.+62     	; 0x1c50 <LCD_displayCharacter+0x146>
    1c12:	fe 01       	movw	r30, r28
    1c14:	e9 5a       	subi	r30, 0xA9	; 169
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	89 e1       	ldi	r24, 0x19	; 25
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	91 83       	std	Z+1, r25	; 0x01
    1c1e:	80 83       	st	Z, r24
    1c20:	fe 01       	movw	r30, r28
    1c22:	e9 5a       	subi	r30, 0xA9	; 169
    1c24:	ff 4f       	sbci	r31, 0xFF	; 255
    1c26:	80 81       	ld	r24, Z
    1c28:	91 81       	ldd	r25, Z+1	; 0x01
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_displayCharacter+0x120>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e9 5a       	subi	r30, 0xA9	; 169
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	de 01       	movw	r26, r28
    1c3a:	a7 5a       	subi	r26, 0xA7	; 167
    1c3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e7 5a       	subi	r30, 0xA7	; 167
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	11 96       	adiw	r26, 0x01	; 1
    1c4c:	9c 93       	st	X, r25
    1c4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	fe 01       	movw	r30, r28
    1c52:	e7 5a       	subi	r30, 0xA7	; 167
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 81       	ld	r24, Z
    1c58:	91 81       	ldd	r25, Z+1	; 0x01
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	d1 f6       	brne	.-76     	; 0x1c12 <LCD_displayCharacter+0x108>
    1c5e:	27 c0       	rjmp	.+78     	; 0x1cae <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	8e 01       	movw	r16, r28
    1c62:	07 5a       	subi	r16, 0xA7	; 167
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	fe 01       	movw	r30, r28
    1c68:	e5 5a       	subi	r30, 0xA5	; 165
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	82 81       	ldd	r24, Z+2	; 0x02
    1c72:	93 81       	ldd	r25, Z+3	; 0x03
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
    1c82:	de 01       	movw	r26, r28
    1c84:	ab 5a       	subi	r26, 0xAB	; 171
    1c86:	bf 4f       	sbci	r27, 0xFF	; 255
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e7 5a       	subi	r30, 0xA7	; 167
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	8d 93       	st	X+, r24
    1c94:	9c 93       	st	X, r25
    1c96:	fe 01       	movw	r30, r28
    1c98:	eb 5a       	subi	r30, 0xAB	; 171
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <LCD_displayCharacter+0x196>
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	eb 5a       	subi	r30, 0xAB	; 171
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1cae:	a8 e3       	ldi	r26, 0x38	; 56
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e8 e3       	ldi	r30, 0x38	; 56
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	88 60       	ori	r24, 0x08	; 8
    1cba:	8c 93       	st	X, r24
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	ef 5a       	subi	r30, 0xAF	; 175
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	80 83       	st	Z, r24
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	a2 83       	std	Z+2, r26	; 0x02
    1cd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	03 5b       	subi	r16, 0xB3	; 179
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ef 5a       	subi	r30, 0xAF	; 175
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a e7       	ldi	r20, 0x7A	; 122
    1cec:	53 e4       	ldi	r21, 0x43	; 67
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	80 83       	st	Z, r24
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	a2 83       	std	Z+2, r26	; 0x02
    1cfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d00:	fe 01       	movw	r30, r28
    1d02:	e3 5b       	subi	r30, 0xB3	; 179
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	44 f4       	brge	.+16     	; 0x1d2e <LCD_displayCharacter+0x224>
		__ticks = 1;
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e5 5b       	subi	r30, 0xB5	; 181
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	64 c0       	rjmp	.+200    	; 0x1df6 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e3 5b       	subi	r30, 0xB3	; 179
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	0c f0       	brlt	.+2      	; 0x1d4e <LCD_displayCharacter+0x244>
    1d4c:	43 c0       	rjmp	.+134    	; 0x1dd4 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ef 5a       	subi	r30, 0xAF	; 175
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	05 5b       	subi	r16, 0xB5	; 181
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	f8 01       	movw	r30, r16
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	1f c0       	rjmp	.+62     	; 0x1dc4 <LCD_displayCharacter+0x2ba>
    1d86:	fe 01       	movw	r30, r28
    1d88:	e7 5b       	subi	r30, 0xB7	; 183
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	89 e1       	ldi	r24, 0x19	; 25
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
    1d94:	fe 01       	movw	r30, r28
    1d96:	e7 5b       	subi	r30, 0xB7	; 183
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_displayCharacter+0x294>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 5b       	subi	r30, 0xB7	; 183
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	de 01       	movw	r26, r28
    1dae:	a5 5b       	subi	r26, 0xB5	; 181
    1db0:	bf 4f       	sbci	r27, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e5 5b       	subi	r30, 0xB5	; 181
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	11 96       	adiw	r26, 0x01	; 1
    1dc0:	9c 93       	st	X, r25
    1dc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e5 5b       	subi	r30, 0xB5	; 181
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	d1 f6       	brne	.-76     	; 0x1d86 <LCD_displayCharacter+0x27c>
    1dd2:	27 c0       	rjmp	.+78     	; 0x1e22 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	8e 01       	movw	r16, r28
    1dd6:	05 5b       	subi	r16, 0xB5	; 181
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e3 5b       	subi	r30, 0xB3	; 179
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	f8 01       	movw	r30, r16
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	de 01       	movw	r26, r28
    1df8:	a9 5b       	subi	r26, 0xB9	; 185
    1dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e5 5b       	subi	r30, 0xB5	; 181
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	80 81       	ld	r24, Z
    1e04:	91 81       	ldd	r25, Z+1	; 0x01
    1e06:	8d 93       	st	X+, r24
    1e08:	9c 93       	st	X, r25
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e9 5b       	subi	r30, 0xB9	; 185
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	80 81       	ld	r24, Z
    1e12:	91 81       	ldd	r25, Z+1	; 0x01
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_displayCharacter+0x30a>
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e9 5b       	subi	r30, 0xB9	; 185
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	91 83       	std	Z+1, r25	; 0x01
    1e20:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    1e22:	a2 e3       	ldi	r26, 0x32	; 50
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e2 e3       	ldi	r30, 0x32	; 50
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	90 7f       	andi	r25, 0xF0	; 240
    1e30:	fe 01       	movw	r30, r28
    1e32:	ed 59       	subi	r30, 0x9D	; 157
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	82 95       	swap	r24
    1e3a:	8f 70       	andi	r24, 0x0F	; 15
    1e3c:	89 2b       	or	r24, r25
    1e3e:	8c 93       	st	X, r24
    1e40:	fe 01       	movw	r30, r28
    1e42:	ed 5b       	subi	r30, 0xBD	; 189
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a0 e8       	ldi	r26, 0x80	; 128
    1e4c:	bf e3       	ldi	r27, 0x3F	; 63
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	a2 83       	std	Z+2, r26	; 0x02
    1e54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	8e 01       	movw	r16, r28
    1e58:	01 5c       	subi	r16, 0xC1	; 193
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ed 5b       	subi	r30, 0xBD	; 189
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a e7       	ldi	r20, 0x7A	; 122
    1e70:	53 e4       	ldi	r21, 0x43	; 67
    1e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	80 83       	st	Z, r24
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	a2 83       	std	Z+2, r26	; 0x02
    1e82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e84:	fe 01       	movw	r30, r28
    1e86:	ff 96       	adiw	r30, 0x3f	; 63
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9e af       	std	Y+62, r25	; 0x3e
    1ea6:	8d af       	std	Y+61, r24	; 0x3d
    1ea8:	46 c0       	rjmp	.+140    	; 0x1f36 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ff 96       	adiw	r30, 0x3f	; 63
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	64 f5       	brge	.+88     	; 0x1f1e <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ed 5b       	subi	r30, 0xBD	; 189
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9e af       	std	Y+62, r25	; 0x3e
    1ef2:	8d af       	std	Y+61, r24	; 0x3d
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_displayCharacter+0x40a>
    1ef6:	89 e1       	ldi	r24, 0x19	; 25
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9c af       	std	Y+60, r25	; 0x3c
    1efc:	8b af       	std	Y+59, r24	; 0x3b
    1efe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f00:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_displayCharacter+0x3f8>
    1f06:	9c af       	std	Y+60, r25	; 0x3c
    1f08:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9e af       	std	Y+62, r25	; 0x3e
    1f12:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_displayCharacter+0x3ec>
    1f1c:	16 c0       	rjmp	.+44     	; 0x1f4a <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	fe 01       	movw	r30, r28
    1f20:	ff 96       	adiw	r30, 0x3f	; 63
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e af       	std	Y+62, r25	; 0x3e
    1f34:	8d af       	std	Y+61, r24	; 0x3d
    1f36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f3a:	9a af       	std	Y+58, r25	; 0x3a
    1f3c:	89 af       	std	Y+57, r24	; 0x39
    1f3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_displayCharacter+0x438>
    1f46:	9a af       	std	Y+58, r25	; 0x3a
    1f48:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1f4a:	a8 e3       	ldi	r26, 0x38	; 56
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e8 e3       	ldi	r30, 0x38	; 56
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	87 7f       	andi	r24, 0xF7	; 247
    1f56:	8c 93       	st	X, r24
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 e8       	ldi	r26, 0x80	; 128
    1f5e:	bf e3       	ldi	r27, 0x3F	; 63
    1f60:	8d ab       	std	Y+53, r24	; 0x35
    1f62:	9e ab       	std	Y+54, r25	; 0x36
    1f64:	af ab       	std	Y+55, r26	; 0x37
    1f66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4a e7       	ldi	r20, 0x7A	; 122
    1f76:	53 e4       	ldi	r21, 0x43	; 67
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	89 ab       	std	Y+49, r24	; 0x31
    1f82:	9a ab       	std	Y+50, r25	; 0x32
    1f84:	ab ab       	std	Y+51, r26	; 0x33
    1f86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f88:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	98 ab       	std	Y+48, r25	; 0x30
    1fa6:	8f a7       	std	Y+47, r24	; 0x2f
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    1faa:	69 a9       	ldd	r22, Y+49	; 0x31
    1fac:	7a a9       	ldd	r23, Y+50	; 0x32
    1fae:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	98 ab       	std	Y+48, r25	; 0x30
    1fe8:	8f a7       	std	Y+47, r24	; 0x2f
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <LCD_displayCharacter+0x500>
    1fec:	89 e1       	ldi	r24, 0x19	; 25
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e a7       	std	Y+46, r25	; 0x2e
    1ff2:	8d a7       	std	Y+45, r24	; 0x2d
    1ff4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ff6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_displayCharacter+0x4ee>
    1ffc:	9e a7       	std	Y+46, r25	; 0x2e
    1ffe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	98 ab       	std	Y+48, r25	; 0x30
    2008:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	8f a5       	ldd	r24, Y+47	; 0x2f
    200c:	98 a9       	ldd	r25, Y+48	; 0x30
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	69 f7       	brne	.-38     	; 0x1fec <LCD_displayCharacter+0x4e2>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	69 a9       	ldd	r22, Y+49	; 0x31
    2016:	7a a9       	ldd	r23, Y+50	; 0x32
    2018:	8b a9       	ldd	r24, Y+51	; 0x33
    201a:	9c a9       	ldd	r25, Y+52	; 0x34
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	98 ab       	std	Y+48, r25	; 0x30
    2026:	8f a7       	std	Y+47, r24	; 0x2f
    2028:	8f a5       	ldd	r24, Y+47	; 0x2f
    202a:	98 a9       	ldd	r25, Y+48	; 0x30
    202c:	9c a7       	std	Y+44, r25	; 0x2c
    202e:	8b a7       	std	Y+43, r24	; 0x2b
    2030:	8b a5       	ldd	r24, Y+43	; 0x2b
    2032:	9c a5       	ldd	r25, Y+44	; 0x2c
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_displayCharacter+0x52a>
    2038:	9c a7       	std	Y+44, r25	; 0x2c
    203a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    203c:	a8 e3       	ldi	r26, 0x38	; 56
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e8 e3       	ldi	r30, 0x38	; 56
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	88 60       	ori	r24, 0x08	; 8
    2048:	8c 93       	st	X, r24
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e8       	ldi	r26, 0x80	; 128
    2050:	bf e3       	ldi	r27, 0x3F	; 63
    2052:	8f a3       	std	Y+39, r24	; 0x27
    2054:	98 a7       	std	Y+40, r25	; 0x28
    2056:	a9 a7       	std	Y+41, r26	; 0x29
    2058:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a e7       	ldi	r20, 0x7A	; 122
    2068:	53 e4       	ldi	r21, 0x43	; 67
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8b a3       	std	Y+35, r24	; 0x23
    2074:	9c a3       	std	Y+36, r25	; 0x24
    2076:	ad a3       	std	Y+37, r26	; 0x25
    2078:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <LCD_displayCharacter+0x592>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
    209a:	3f c0       	rjmp	.+126    	; 0x211a <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <LCD_displayCharacter+0x5f2>
    20de:	89 e1       	ldi	r24, 0x19	; 25
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	98 a3       	std	Y+32, r25	; 0x20
    20e4:	8f 8f       	std	Y+31, r24	; 0x1f
    20e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <LCD_displayCharacter+0x5e0>
    20ee:	98 a3       	std	Y+32, r25	; 0x20
    20f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	89 a1       	ldd	r24, Y+33	; 0x21
    20f4:	9a a1       	ldd	r25, Y+34	; 0x22
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	89 a1       	ldd	r24, Y+33	; 0x21
    20fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <LCD_displayCharacter+0x5d4>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6b a1       	ldd	r22, Y+35	; 0x23
    2108:	7c a1       	ldd	r23, Y+36	; 0x24
    210a:	8d a1       	ldd	r24, Y+37	; 0x25
    210c:	9e a1       	ldd	r25, Y+38	; 0x26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	9e 8f       	std	Y+30, r25	; 0x1e
    2120:	8d 8f       	std	Y+29, r24	; 0x1d
    2122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_displayCharacter+0x61c>
    212a:	9e 8f       	std	Y+30, r25	; 0x1e
    212c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    212e:	a2 e3       	ldi	r26, 0x32	; 50
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e2 e3       	ldi	r30, 0x32	; 50
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	98 2f       	mov	r25, r24
    213a:	90 7f       	andi	r25, 0xF0	; 240
    213c:	fe 01       	movw	r30, r28
    213e:	ed 59       	subi	r30, 0x9D	; 157
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	8f 70       	andi	r24, 0x0F	; 15
    2146:	89 2b       	or	r24, r25
    2148:	8c 93       	st	X, r24
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	89 8f       	std	Y+25, r24	; 0x19
    2154:	9a 8f       	std	Y+26, r25	; 0x1a
    2156:	ab 8f       	std	Y+27, r26	; 0x1b
    2158:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	69 8d       	ldd	r22, Y+25	; 0x19
    215c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2160:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a e7       	ldi	r20, 0x7A	; 122
    2168:	53 e4       	ldi	r21, 0x43	; 67
    216a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8d 8b       	std	Y+21, r24	; 0x15
    2174:	9e 8b       	std	Y+22, r25	; 0x16
    2176:	af 8b       	std	Y+23, r26	; 0x17
    2178:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    217a:	6d 89       	ldd	r22, Y+21	; 0x15
    217c:	7e 89       	ldd	r23, Y+22	; 0x16
    217e:	8f 89       	ldd	r24, Y+23	; 0x17
    2180:	98 8d       	ldd	r25, Y+24	; 0x18
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_displayCharacter+0x692>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 8b       	std	Y+20, r25	; 0x14
    2198:	8b 8b       	std	Y+19, r24	; 0x13
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    219c:	6d 89       	ldd	r22, Y+21	; 0x15
    219e:	7e 89       	ldd	r23, Y+22	; 0x16
    21a0:	8f 89       	ldd	r24, Y+23	; 0x17
    21a2:	98 8d       	ldd	r25, Y+24	; 0x18
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	69 8d       	ldd	r22, Y+25	; 0x19
    21b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_displayCharacter+0x6f2>
    21de:	89 e1       	ldi	r24, 0x19	; 25
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9a 8b       	std	Y+18, r25	; 0x12
    21e4:	89 8b       	std	Y+17, r24	; 0x11
    21e6:	89 89       	ldd	r24, Y+17	; 0x11
    21e8:	9a 89       	ldd	r25, Y+18	; 0x12
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_displayCharacter+0x6e0>
    21ee:	9a 8b       	std	Y+18, r25	; 0x12
    21f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	8b 89       	ldd	r24, Y+19	; 0x13
    21f4:	9c 89       	ldd	r25, Y+20	; 0x14
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9c 8b       	std	Y+20, r25	; 0x14
    21fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_displayCharacter+0x6d4>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6d 89       	ldd	r22, Y+21	; 0x15
    2208:	7e 89       	ldd	r23, Y+22	; 0x16
    220a:	8f 89       	ldd	r24, Y+23	; 0x17
    220c:	98 8d       	ldd	r25, Y+24	; 0x18
    220e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9c 8b       	std	Y+20, r25	; 0x14
    2218:	8b 8b       	std	Y+19, r24	; 0x13
    221a:	8b 89       	ldd	r24, Y+19	; 0x13
    221c:	9c 89       	ldd	r25, Y+20	; 0x14
    221e:	98 8b       	std	Y+16, r25	; 0x10
    2220:	8f 87       	std	Y+15, r24	; 0x0f
    2222:	8f 85       	ldd	r24, Y+15	; 0x0f
    2224:	98 89       	ldd	r25, Y+16	; 0x10
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_displayCharacter+0x71c>
    222a:	98 8b       	std	Y+16, r25	; 0x10
    222c:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    222e:	a8 e3       	ldi	r26, 0x38	; 56
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e8 e3       	ldi	r30, 0x38	; 56
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	87 7f       	andi	r24, 0xF7	; 247
    223a:	8c 93       	st	X, r24
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	a0 e8       	ldi	r26, 0x80	; 128
    2242:	bf e3       	ldi	r27, 0x3F	; 63
    2244:	8b 87       	std	Y+11, r24	; 0x0b
    2246:	9c 87       	std	Y+12, r25	; 0x0c
    2248:	ad 87       	std	Y+13, r26	; 0x0d
    224a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	4a e7       	ldi	r20, 0x7A	; 122
    225a:	53 e4       	ldi	r21, 0x43	; 67
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	8f 83       	std	Y+7, r24	; 0x07
    2266:	98 87       	std	Y+8, r25	; 0x08
    2268:	a9 87       	std	Y+9, r26	; 0x09
    226a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e8       	ldi	r20, 0x80	; 128
    227a:	5f e3       	ldi	r21, 0x3F	; 63
    227c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2280:	88 23       	and	r24, r24
    2282:	2c f4       	brge	.+10     	; 0x228e <LCD_displayCharacter+0x784>
		__ticks = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
    228c:	3f c0       	rjmp	.+126    	; 0x230c <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	3f ef       	ldi	r19, 0xFF	; 255
    229a:	4f e7       	ldi	r20, 0x7F	; 127
    229c:	57 e4       	ldi	r21, 0x47	; 71
    229e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a2:	18 16       	cp	r1, r24
    22a4:	4c f5       	brge	.+82     	; 0x22f8 <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e2       	ldi	r20, 0x20	; 32
    22b4:	51 e4       	ldi	r21, 0x41	; 65
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	bc 01       	movw	r22, r24
    22c0:	cd 01       	movw	r24, r26
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	0f c0       	rjmp	.+30     	; 0x22ee <LCD_displayCharacter+0x7e4>
    22d0:	89 e1       	ldi	r24, 0x19	; 25
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9c 83       	std	Y+4, r25	; 0x04
    22d6:	8b 83       	std	Y+3, r24	; 0x03
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <LCD_displayCharacter+0x7d2>
    22e0:	9c 83       	std	Y+4, r25	; 0x04
    22e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	8d 81       	ldd	r24, Y+5	; 0x05
    22e6:	9e 81       	ldd	r25, Y+6	; 0x06
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	69 f7       	brne	.-38     	; 0x22d0 <LCD_displayCharacter+0x7c6>
    22f6:	14 c0       	rjmp	.+40     	; 0x2320 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	9a 81       	ldd	r25, Y+2	; 0x02
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_displayCharacter+0x80e>
    231c:	9a 83       	std	Y+2, r25	; 0x02
    231e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2320:	cd 59       	subi	r28, 0x9D	; 157
    2322:	df 4f       	sbci	r29, 0xFF	; 255
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	cf 91       	pop	r28
    2330:	df 91       	pop	r29
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	08 95       	ret

00002338 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <LCD_displayString+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	0e c0       	rjmp	.+28     	; 0x2368 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	9b 81       	ldd	r25, Y+3	; 0x03
    2356:	fc 01       	movw	r30, r24
    2358:	e2 0f       	add	r30, r18
    235a:	f3 1f       	adc	r31, r19
    235c:	80 81       	ld	r24, Z
    235e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_displayCharacter>
		i++;
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	8f 5f       	subi	r24, 0xFF	; 255
    2366:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	fc 01       	movw	r30, r24
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	80 81       	ld	r24, Z
    237a:	88 23       	and	r24, r24
    237c:	39 f7       	brne	.-50     	; 0x234c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <LCD_goToRowColumn+0x6>
    2390:	00 d0       	rcall	.+0      	; 0x2392 <LCD_goToRowColumn+0x8>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	8a 83       	std	Y+2, r24	; 0x02
    239a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	3d 83       	std	Y+5, r19	; 0x05
    23a4:	2c 83       	std	Y+4, r18	; 0x04
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	9d 81       	ldd	r25, Y+5	; 0x05
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	91 05       	cpc	r25, r1
    23ae:	c1 f0       	breq	.+48     	; 0x23e0 <LCD_goToRowColumn+0x56>
    23b0:	2c 81       	ldd	r18, Y+4	; 0x04
    23b2:	3d 81       	ldd	r19, Y+5	; 0x05
    23b4:	22 30       	cpi	r18, 0x02	; 2
    23b6:	31 05       	cpc	r19, r1
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <LCD_goToRowColumn+0x3a>
    23ba:	8c 81       	ldd	r24, Y+4	; 0x04
    23bc:	9d 81       	ldd	r25, Y+5	; 0x05
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	61 f0       	breq	.+24     	; 0x23da <LCD_goToRowColumn+0x50>
    23c2:	19 c0       	rjmp	.+50     	; 0x23f6 <LCD_goToRowColumn+0x6c>
    23c4:	2c 81       	ldd	r18, Y+4	; 0x04
    23c6:	3d 81       	ldd	r19, Y+5	; 0x05
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	69 f0       	breq	.+26     	; 0x23e8 <LCD_goToRowColumn+0x5e>
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	9d 81       	ldd	r25, Y+5	; 0x05
    23d2:	83 30       	cpi	r24, 0x03	; 3
    23d4:	91 05       	cpc	r25, r1
    23d6:	61 f0       	breq	.+24     	; 0x23f0 <LCD_goToRowColumn+0x66>
    23d8:	0e c0       	rjmp	.+28     	; 0x23f6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	80 5c       	subi	r24, 0xC0	; 192
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	07 c0       	rjmp	.+14     	; 0x23f6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	80 5f       	subi	r24, 0xF0	; 240
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	03 c0       	rjmp	.+6      	; 0x23f6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	80 5b       	subi	r24, 0xB0	; 176
    23f4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	80 68       	ori	r24, 0x80	; 128
    23fa:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_sendCommand>
}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <LCD_displayStringRowColumn+0x6>
    2414:	00 d0       	rcall	.+0      	; 0x2416 <LCD_displayStringRowColumn+0x8>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	6a 83       	std	Y+2, r22	; 0x02
    241e:	5c 83       	std	Y+4, r21	; 0x04
    2420:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	6a 81       	ldd	r22, Y+2	; 0x02
    2426:	0e 94 c5 11 	call	0x238a	; 0x238a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
}
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	08 95       	ret

00002440 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2440:	df 93       	push	r29
    2442:	cf 93       	push	r28
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	62 97       	sbiw	r28, 0x12	; 18
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2458:	89 89       	ldd	r24, Y+17	; 0x11
    245a:	9a 89       	ldd	r25, Y+18	; 0x12
    245c:	9e 01       	movw	r18, r28
    245e:	2f 5f       	subi	r18, 0xFF	; 255
    2460:	3f 4f       	sbci	r19, 0xFF	; 255
    2462:	b9 01       	movw	r22, r18
    2464:	4a e0       	ldi	r20, 0x0A	; 10
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	0e 94 ab 12 	call	0x2556	; 0x2556 <itoa>
   LCD_displayString(buff);
    246c:	ce 01       	movw	r24, r28
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayString>
}
    2474:	62 96       	adiw	r28, 0x12	; 18
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_sendCommand>
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <__divmodhi4>:
    249a:	97 fb       	bst	r25, 7
    249c:	09 2e       	mov	r0, r25
    249e:	07 26       	eor	r0, r23
    24a0:	0a d0       	rcall	.+20     	; 0x24b6 <__divmodhi4_neg1>
    24a2:	77 fd       	sbrc	r23, 7
    24a4:	04 d0       	rcall	.+8      	; 0x24ae <__divmodhi4_neg2>
    24a6:	0c d0       	rcall	.+24     	; 0x24c0 <__udivmodhi4>
    24a8:	06 d0       	rcall	.+12     	; 0x24b6 <__divmodhi4_neg1>
    24aa:	00 20       	and	r0, r0
    24ac:	1a f4       	brpl	.+6      	; 0x24b4 <__divmodhi4_exit>

000024ae <__divmodhi4_neg2>:
    24ae:	70 95       	com	r23
    24b0:	61 95       	neg	r22
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255

000024b4 <__divmodhi4_exit>:
    24b4:	08 95       	ret

000024b6 <__divmodhi4_neg1>:
    24b6:	f6 f7       	brtc	.-4      	; 0x24b4 <__divmodhi4_exit>
    24b8:	90 95       	com	r25
    24ba:	81 95       	neg	r24
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	08 95       	ret

000024c0 <__udivmodhi4>:
    24c0:	aa 1b       	sub	r26, r26
    24c2:	bb 1b       	sub	r27, r27
    24c4:	51 e1       	ldi	r21, 0x11	; 17
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <__udivmodhi4_ep>

000024c8 <__udivmodhi4_loop>:
    24c8:	aa 1f       	adc	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	a6 17       	cp	r26, r22
    24ce:	b7 07       	cpc	r27, r23
    24d0:	10 f0       	brcs	.+4      	; 0x24d6 <__udivmodhi4_ep>
    24d2:	a6 1b       	sub	r26, r22
    24d4:	b7 0b       	sbc	r27, r23

000024d6 <__udivmodhi4_ep>:
    24d6:	88 1f       	adc	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	5a 95       	dec	r21
    24dc:	a9 f7       	brne	.-22     	; 0x24c8 <__udivmodhi4_loop>
    24de:	80 95       	com	r24
    24e0:	90 95       	com	r25
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	08 95       	ret

000024e8 <__prologue_saves__>:
    24e8:	2f 92       	push	r2
    24ea:	3f 92       	push	r3
    24ec:	4f 92       	push	r4
    24ee:	5f 92       	push	r5
    24f0:	6f 92       	push	r6
    24f2:	7f 92       	push	r7
    24f4:	8f 92       	push	r8
    24f6:	9f 92       	push	r9
    24f8:	af 92       	push	r10
    24fa:	bf 92       	push	r11
    24fc:	cf 92       	push	r12
    24fe:	df 92       	push	r13
    2500:	ef 92       	push	r14
    2502:	ff 92       	push	r15
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	ca 1b       	sub	r28, r26
    2512:	db 0b       	sbc	r29, r27
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	09 94       	ijmp

00002520 <__epilogue_restores__>:
    2520:	2a 88       	ldd	r2, Y+18	; 0x12
    2522:	39 88       	ldd	r3, Y+17	; 0x11
    2524:	48 88       	ldd	r4, Y+16	; 0x10
    2526:	5f 84       	ldd	r5, Y+15	; 0x0f
    2528:	6e 84       	ldd	r6, Y+14	; 0x0e
    252a:	7d 84       	ldd	r7, Y+13	; 0x0d
    252c:	8c 84       	ldd	r8, Y+12	; 0x0c
    252e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2530:	aa 84       	ldd	r10, Y+10	; 0x0a
    2532:	b9 84       	ldd	r11, Y+9	; 0x09
    2534:	c8 84       	ldd	r12, Y+8	; 0x08
    2536:	df 80       	ldd	r13, Y+7	; 0x07
    2538:	ee 80       	ldd	r14, Y+6	; 0x06
    253a:	fd 80       	ldd	r15, Y+5	; 0x05
    253c:	0c 81       	ldd	r16, Y+4	; 0x04
    253e:	1b 81       	ldd	r17, Y+3	; 0x03
    2540:	aa 81       	ldd	r26, Y+2	; 0x02
    2542:	b9 81       	ldd	r27, Y+1	; 0x01
    2544:	ce 0f       	add	r28, r30
    2546:	d1 1d       	adc	r29, r1
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	ed 01       	movw	r28, r26
    2554:	08 95       	ret

00002556 <itoa>:
    2556:	fb 01       	movw	r30, r22
    2558:	9f 01       	movw	r18, r30
    255a:	e8 94       	clt
    255c:	42 30       	cpi	r20, 0x02	; 2
    255e:	c4 f0       	brlt	.+48     	; 0x2590 <itoa+0x3a>
    2560:	45 32       	cpi	r20, 0x25	; 37
    2562:	b4 f4       	brge	.+44     	; 0x2590 <itoa+0x3a>
    2564:	4a 30       	cpi	r20, 0x0A	; 10
    2566:	29 f4       	brne	.+10     	; 0x2572 <itoa+0x1c>
    2568:	97 fb       	bst	r25, 7
    256a:	1e f4       	brtc	.+6      	; 0x2572 <itoa+0x1c>
    256c:	90 95       	com	r25
    256e:	81 95       	neg	r24
    2570:	9f 4f       	sbci	r25, 0xFF	; 255
    2572:	64 2f       	mov	r22, r20
    2574:	77 27       	eor	r23, r23
    2576:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__udivmodhi4>
    257a:	80 5d       	subi	r24, 0xD0	; 208
    257c:	8a 33       	cpi	r24, 0x3A	; 58
    257e:	0c f0       	brlt	.+2      	; 0x2582 <itoa+0x2c>
    2580:	89 5d       	subi	r24, 0xD9	; 217
    2582:	81 93       	st	Z+, r24
    2584:	cb 01       	movw	r24, r22
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	a1 f7       	brne	.-24     	; 0x2572 <itoa+0x1c>
    258a:	16 f4       	brtc	.+4      	; 0x2590 <itoa+0x3a>
    258c:	5d e2       	ldi	r21, 0x2D	; 45
    258e:	51 93       	st	Z+, r21
    2590:	10 82       	st	Z, r1
    2592:	c9 01       	movw	r24, r18
    2594:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <strrev>

00002598 <strrev>:
    2598:	dc 01       	movw	r26, r24
    259a:	fc 01       	movw	r30, r24
    259c:	67 2f       	mov	r22, r23
    259e:	71 91       	ld	r23, Z+
    25a0:	77 23       	and	r23, r23
    25a2:	e1 f7       	brne	.-8      	; 0x259c <strrev+0x4>
    25a4:	32 97       	sbiw	r30, 0x02	; 2
    25a6:	04 c0       	rjmp	.+8      	; 0x25b0 <strrev+0x18>
    25a8:	7c 91       	ld	r23, X
    25aa:	6d 93       	st	X+, r22
    25ac:	70 83       	st	Z, r23
    25ae:	62 91       	ld	r22, -Z
    25b0:	ae 17       	cp	r26, r30
    25b2:	bf 07       	cpc	r27, r31
    25b4:	c8 f3       	brcs	.-14     	; 0x25a8 <strrev+0x10>
    25b6:	08 95       	ret

000025b8 <_exit>:
    25b8:	f8 94       	cli

000025ba <__stop_program>:
    25ba:	ff cf       	rjmp	.-2      	; 0x25ba <__stop_program>
